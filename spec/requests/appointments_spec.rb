require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/appointments', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Appointment. As you add validations to Appointment, be sure to
  # adjust the attributes here as well.

  before(:all) do
    Rails.application.load_seed
  end

  let!(:user) { create(:random_user) }
  let!(:token) { JWT.encode({ user_id: user.id }, 's3cr3t') }
  let!(:appointment) { create(:random_appointment, user_id: user.id) }

  let(:valid_attributes) do
    {
      "service_id": appointment.service_id,
      "start_time": appointment.start_time,
      "end_time": appointment.end_time,
      "description": appointment.description,
      "user_id": user.id
    }
  end

  let(:invalid_attributes) do
    { "user_id": '50' }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # AppointmentsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { 'Content-Type' => 'application/json', 'Authorization' => "Bearer #{token}" }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Appointment.create! valid_attributes
      get '/appointments', headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Appointment' do
        expect do
          post appointments_url,
               params: { appointment: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Appointment, :count).by(1)
      end

      it 'renders a JSON response with the new appointment' do
        post appointments_url,
             params: { appointment: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.body).to match('Service created successfully')
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Appointment' do
        expect do
          post appointments_url,
               params: { appointment: invalid_attributes }, as: :json
        end.to change(Appointment, :count).by(0)
      end

      it 'renders a JSON response with errors for the new appointment' do
        post appointments_url,
             params: { appointment: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.body).to match(/must exist/)
      end
    end
  end
end
